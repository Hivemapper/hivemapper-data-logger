// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.2
// source: sensordata.proto

package sensordata

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ImuData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemTime    string                     `protobuf:"bytes,1,opt,name=system_time,json=systemTime,proto3" json:"system_time,omitempty"`
	Accelerometer *ImuData_AccelerometerData `protobuf:"bytes,2,opt,name=accelerometer,proto3" json:"accelerometer,omitempty"`
	Gyroscope     *ImuData_GyroscopeData     `protobuf:"bytes,3,opt,name=gyroscope,proto3" json:"gyroscope,omitempty"`
	Temperature   float64                    `protobuf:"fixed64,4,opt,name=temperature,proto3" json:"temperature,omitempty"`
	Time          string                     `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"` // is this needed?
}

func (x *ImuData) Reset() {
	*x = ImuData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sensordata_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImuData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImuData) ProtoMessage() {}

func (x *ImuData) ProtoReflect() protoreflect.Message {
	mi := &file_sensordata_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImuData.ProtoReflect.Descriptor instead.
func (*ImuData) Descriptor() ([]byte, []int) {
	return file_sensordata_proto_rawDescGZIP(), []int{0}
}

func (x *ImuData) GetSystemTime() string {
	if x != nil {
		return x.SystemTime
	}
	return ""
}

func (x *ImuData) GetAccelerometer() *ImuData_AccelerometerData {
	if x != nil {
		return x.Accelerometer
	}
	return nil
}

func (x *ImuData) GetGyroscope() *ImuData_GyroscopeData {
	if x != nil {
		return x.Gyroscope
	}
	return nil
}

func (x *ImuData) GetTemperature() float64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *ImuData) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

type MagnetometerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemTime string  `protobuf:"bytes,1,opt,name=system_time,json=systemTime,proto3" json:"system_time,omitempty"`
	X          float64 `protobuf:"fixed64,2,opt,name=x,proto3" json:"x,omitempty"`
	Y          float64 `protobuf:"fixed64,3,opt,name=y,proto3" json:"y,omitempty"`
	Z          float64 `protobuf:"fixed64,4,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *MagnetometerData) Reset() {
	*x = MagnetometerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sensordata_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagnetometerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagnetometerData) ProtoMessage() {}

func (x *MagnetometerData) ProtoReflect() protoreflect.Message {
	mi := &file_sensordata_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagnetometerData.ProtoReflect.Descriptor instead.
func (*MagnetometerData) Descriptor() ([]byte, []int) {
	return file_sensordata_proto_rawDescGZIP(), []int{1}
}

func (x *MagnetometerData) GetSystemTime() string {
	if x != nil {
		return x.SystemTime
	}
	return ""
}

func (x *MagnetometerData) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *MagnetometerData) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *MagnetometerData) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

type GnssData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ttff                int64                  `protobuf:"varint,1,opt,name=ttff,proto3" json:"ttff,omitempty"`
	SystemTime          string                 `protobuf:"bytes,2,opt,name=system_time,json=systemTime,proto3" json:"system_time,omitempty"`
	ActualSystemTime    string                 `protobuf:"bytes,3,opt,name=actual_system_time,json=actualSystemTime,proto3" json:"actual_system_time,omitempty"`
	Timestamp           string                 `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Fix                 string                 `protobuf:"bytes,5,opt,name=fix,proto3" json:"fix,omitempty"`
	Latitude            float64                `protobuf:"fixed64,6,opt,name=latitude,proto3" json:"latitude,omitempty"`
	UnfilteredLatitude  float64                `protobuf:"fixed64,7,opt,name=unfiltered_latitude,json=unfilteredLatitude,proto3" json:"unfiltered_latitude,omitempty"`
	Longitude           float64                `protobuf:"fixed64,8,opt,name=longitude,proto3" json:"longitude,omitempty"`
	UnfilteredLongitude float64                `protobuf:"fixed64,9,opt,name=unfiltered_longitude,json=unfilteredLongitude,proto3" json:"unfiltered_longitude,omitempty"`
	Altitude            float64                `protobuf:"fixed64,10,opt,name=altitude,proto3" json:"altitude,omitempty"`
	Heading             float64                `protobuf:"fixed64,11,opt,name=heading,proto3" json:"heading,omitempty"`
	Speed               float64                `protobuf:"fixed64,12,opt,name=speed,proto3" json:"speed,omitempty"`
	Dop                 *GnssData_Dop          `protobuf:"bytes,13,opt,name=dop,proto3" json:"dop,omitempty"`
	Satellites          *GnssData_Satellites   `protobuf:"bytes,14,opt,name=satellites,proto3" json:"satellites,omitempty"`
	Sep                 float64                `protobuf:"fixed64,15,opt,name=sep,proto3" json:"sep,omitempty"`
	Eph                 float64                `protobuf:"fixed64,16,opt,name=eph,proto3" json:"eph,omitempty"`
	Rf                  *GnssData_RF           `protobuf:"bytes,17,opt,name=rf,proto3" json:"rf,omitempty"`
	SpeedAccuracy       float64                `protobuf:"fixed64,18,opt,name=speed_accuracy,json=speedAccuracy,proto3" json:"speed_accuracy,omitempty"`
	HeadingAccuracy     float64                `protobuf:"fixed64,19,opt,name=heading_accuracy,json=headingAccuracy,proto3" json:"heading_accuracy,omitempty"`
	TimeResolved        int32                  `protobuf:"varint,20,opt,name=time_resolved,json=timeResolved,proto3" json:"time_resolved,omitempty"`
	HorizontalAccuracy  float64                `protobuf:"fixed64,21,opt,name=horizontal_accuracy,json=horizontalAccuracy,proto3" json:"horizontal_accuracy,omitempty"`
	VerticalAccuracy    float64                `protobuf:"fixed64,22,opt,name=vertical_accuracy,json=verticalAccuracy,proto3" json:"vertical_accuracy,omitempty"`
	Gga                 string                 `protobuf:"bytes,23,opt,name=gga,proto3" json:"gga,omitempty"`
	RxmMeasx            *GnssData_RxmMeasx     `protobuf:"bytes,24,opt,name=rxm_measx,json=rxmMeasx,proto3" json:"rxm_measx,omitempty"`
	SecEcsign           *GnssData_UbxSecEcsign `protobuf:"bytes,25,opt,name=sec_ecsign,json=secEcsign,proto3" json:"sec_ecsign,omitempty"`
	SecEcsignBuffer     string                 `protobuf:"bytes,26,opt,name=sec_ecsign_buffer,json=secEcsignBuffer,proto3" json:"sec_ecsign_buffer,omitempty"`
}

func (x *GnssData) Reset() {
	*x = GnssData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sensordata_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GnssData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GnssData) ProtoMessage() {}

func (x *GnssData) ProtoReflect() protoreflect.Message {
	mi := &file_sensordata_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GnssData.ProtoReflect.Descriptor instead.
func (*GnssData) Descriptor() ([]byte, []int) {
	return file_sensordata_proto_rawDescGZIP(), []int{2}
}

func (x *GnssData) GetTtff() int64 {
	if x != nil {
		return x.Ttff
	}
	return 0
}

func (x *GnssData) GetSystemTime() string {
	if x != nil {
		return x.SystemTime
	}
	return ""
}

func (x *GnssData) GetActualSystemTime() string {
	if x != nil {
		return x.ActualSystemTime
	}
	return ""
}

func (x *GnssData) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *GnssData) GetFix() string {
	if x != nil {
		return x.Fix
	}
	return ""
}

func (x *GnssData) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GnssData) GetUnfilteredLatitude() float64 {
	if x != nil {
		return x.UnfilteredLatitude
	}
	return 0
}

func (x *GnssData) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *GnssData) GetUnfilteredLongitude() float64 {
	if x != nil {
		return x.UnfilteredLongitude
	}
	return 0
}

func (x *GnssData) GetAltitude() float64 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *GnssData) GetHeading() float64 {
	if x != nil {
		return x.Heading
	}
	return 0
}

func (x *GnssData) GetSpeed() float64 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *GnssData) GetDop() *GnssData_Dop {
	if x != nil {
		return x.Dop
	}
	return nil
}

func (x *GnssData) GetSatellites() *GnssData_Satellites {
	if x != nil {
		return x.Satellites
	}
	return nil
}

func (x *GnssData) GetSep() float64 {
	if x != nil {
		return x.Sep
	}
	return 0
}

func (x *GnssData) GetEph() float64 {
	if x != nil {
		return x.Eph
	}
	return 0
}

func (x *GnssData) GetRf() *GnssData_RF {
	if x != nil {
		return x.Rf
	}
	return nil
}

func (x *GnssData) GetSpeedAccuracy() float64 {
	if x != nil {
		return x.SpeedAccuracy
	}
	return 0
}

func (x *GnssData) GetHeadingAccuracy() float64 {
	if x != nil {
		return x.HeadingAccuracy
	}
	return 0
}

func (x *GnssData) GetTimeResolved() int32 {
	if x != nil {
		return x.TimeResolved
	}
	return 0
}

func (x *GnssData) GetHorizontalAccuracy() float64 {
	if x != nil {
		return x.HorizontalAccuracy
	}
	return 0
}

func (x *GnssData) GetVerticalAccuracy() float64 {
	if x != nil {
		return x.VerticalAccuracy
	}
	return 0
}

func (x *GnssData) GetGga() string {
	if x != nil {
		return x.Gga
	}
	return ""
}

func (x *GnssData) GetRxmMeasx() *GnssData_RxmMeasx {
	if x != nil {
		return x.RxmMeasx
	}
	return nil
}

func (x *GnssData) GetSecEcsign() *GnssData_UbxSecEcsign {
	if x != nil {
		return x.SecEcsign
	}
	return nil
}

func (x *GnssData) GetSecEcsignBuffer() string {
	if x != nil {
		return x.SecEcsignBuffer
	}
	return ""
}

type NavDop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemTime string `protobuf:"bytes,1,opt,name=system_time,json=systemTime,proto3" json:"system_time,omitempty"`
	ItowMs     uint32 `protobuf:"varint,2,opt,name=itow_ms,json=itowMs,proto3" json:"itow_ms,omitempty"`
	Gdop       uint32 `protobuf:"varint,3,opt,name=gdop,proto3" json:"gdop,omitempty"`
	Pdop       uint32 `protobuf:"varint,4,opt,name=pdop,proto3" json:"pdop,omitempty"`
	Tdop       uint32 `protobuf:"varint,5,opt,name=tdop,proto3" json:"tdop,omitempty"`
	Vdop       uint32 `protobuf:"varint,6,opt,name=vdop,proto3" json:"vdop,omitempty"`
	Hdop       uint32 `protobuf:"varint,7,opt,name=hdop,proto3" json:"hdop,omitempty"`
	Ndop       uint32 `protobuf:"varint,8,opt,name=ndop,proto3" json:"ndop,omitempty"`
	Edop       uint32 `protobuf:"varint,9,opt,name=edop,proto3" json:"edop,omitempty"`
}

func (x *NavDop) Reset() {
	*x = NavDop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sensordata_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavDop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavDop) ProtoMessage() {}

func (x *NavDop) ProtoReflect() protoreflect.Message {
	mi := &file_sensordata_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavDop.ProtoReflect.Descriptor instead.
func (*NavDop) Descriptor() ([]byte, []int) {
	return file_sensordata_proto_rawDescGZIP(), []int{3}
}

func (x *NavDop) GetSystemTime() string {
	if x != nil {
		return x.SystemTime
	}
	return ""
}

func (x *NavDop) GetItowMs() uint32 {
	if x != nil {
		return x.ItowMs
	}
	return 0
}

func (x *NavDop) GetGdop() uint32 {
	if x != nil {
		return x.Gdop
	}
	return 0
}

func (x *NavDop) GetPdop() uint32 {
	if x != nil {
		return x.Pdop
	}
	return 0
}

func (x *NavDop) GetTdop() uint32 {
	if x != nil {
		return x.Tdop
	}
	return 0
}

func (x *NavDop) GetVdop() uint32 {
	if x != nil {
		return x.Vdop
	}
	return 0
}

func (x *NavDop) GetHdop() uint32 {
	if x != nil {
		return x.Hdop
	}
	return 0
}

func (x *NavDop) GetNdop() uint32 {
	if x != nil {
		return x.Ndop
	}
	return 0
}

func (x *NavDop) GetEdop() uint32 {
	if x != nil {
		return x.Edop
	}
	return 0
}

type NavSat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemTime string        `protobuf:"bytes,1,opt,name=system_time,json=systemTime,proto3" json:"system_time,omitempty"`
	ItowMs     uint32        `protobuf:"varint,2,opt,name=itow_ms,json=itowMs,proto3" json:"itow_ms,omitempty"`
	Version    uint32        `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	NumSvs     uint32        `protobuf:"varint,4,opt,name=num_svs,json=numSvs,proto3" json:"num_svs,omitempty"`
	Svs        []*NavSat_Svs `protobuf:"bytes,5,rep,name=svs,proto3" json:"svs,omitempty"`
}

func (x *NavSat) Reset() {
	*x = NavSat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sensordata_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavSat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavSat) ProtoMessage() {}

func (x *NavSat) ProtoReflect() protoreflect.Message {
	mi := &file_sensordata_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavSat.ProtoReflect.Descriptor instead.
func (*NavSat) Descriptor() ([]byte, []int) {
	return file_sensordata_proto_rawDescGZIP(), []int{4}
}

func (x *NavSat) GetSystemTime() string {
	if x != nil {
		return x.SystemTime
	}
	return ""
}

func (x *NavSat) GetItowMs() uint32 {
	if x != nil {
		return x.ItowMs
	}
	return 0
}

func (x *NavSat) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *NavSat) GetNumSvs() uint32 {
	if x != nil {
		return x.NumSvs
	}
	return 0
}

func (x *NavSat) GetSvs() []*NavSat_Svs {
	if x != nil {
		return x.Svs
	}
	return nil
}

type NavPvt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemTime   string `protobuf:"bytes,1,opt,name=system_time,json=systemTime,proto3" json:"system_time,omitempty"`
	ItowMs       uint32 `protobuf:"varint,2,opt,name=itow_ms,json=itowMs,proto3" json:"itow_ms,omitempty"`
	YearY        uint32 `protobuf:"varint,3,opt,name=year_y,json=yearY,proto3" json:"year_y,omitempty"`
	MonthMonth   uint32 `protobuf:"varint,4,opt,name=month_month,json=monthMonth,proto3" json:"month_month,omitempty"`
	DayD         uint32 `protobuf:"varint,5,opt,name=day_d,json=dayD,proto3" json:"day_d,omitempty"`
	HourH        uint32 `protobuf:"varint,6,opt,name=hour_h,json=hourH,proto3" json:"hour_h,omitempty"`
	MinMin       uint32 `protobuf:"varint,7,opt,name=min_min,json=minMin,proto3" json:"min_min,omitempty"`
	SecS         uint32 `protobuf:"varint,8,opt,name=sec_s,json=secS,proto3" json:"sec_s,omitempty"`
	Valid        uint32 `protobuf:"varint,9,opt,name=valid,proto3" json:"valid,omitempty"`
	TAccNs       uint32 `protobuf:"varint,10,opt,name=t_acc_ns,json=tAccNs,proto3" json:"t_acc_ns,omitempty"`
	NanoNs       uint32 `protobuf:"varint,11,opt,name=nano_ns,json=nanoNs,proto3" json:"nano_ns,omitempty"`
	FixType      uint32 `protobuf:"varint,12,opt,name=fix_type,json=fixType,proto3" json:"fix_type,omitempty"`
	Flags        uint32 `protobuf:"varint,13,opt,name=flags,proto3" json:"flags,omitempty"`
	Flags2       uint32 `protobuf:"varint,14,opt,name=flags2,proto3" json:"flags2,omitempty"`
	NumSv        uint32 `protobuf:"varint,15,opt,name=num_sv,json=numSv,proto3" json:"num_sv,omitempty"`
	LonDege7     int32  `protobuf:"varint,16,opt,name=lon_dege7,json=lonDege7,proto3" json:"lon_dege7,omitempty"`
	LatDege7     int32  `protobuf:"varint,17,opt,name=lat_dege7,json=latDege7,proto3" json:"lat_dege7,omitempty"`
	HeightMm     int32  `protobuf:"varint,18,opt,name=height_mm,json=heightMm,proto3" json:"height_mm,omitempty"`
	HmslMm       int32  `protobuf:"varint,19,opt,name=hmsl_mm,json=hmslMm,proto3" json:"hmsl_mm,omitempty"`
	HAccMm       uint32 `protobuf:"varint,20,opt,name=h_acc_mm,json=hAccMm,proto3" json:"h_acc_mm,omitempty"`
	VAccMm       uint32 `protobuf:"varint,21,opt,name=v_acc_mm,json=vAccMm,proto3" json:"v_acc_mm,omitempty"`
	VelNMmS      int32  `protobuf:"varint,22,opt,name=vel_n_mm_s,json=velNMmS,proto3" json:"vel_n_mm_s,omitempty"`
	VelEMmS      int32  `protobuf:"varint,23,opt,name=vel_e_mm_s,json=velEMmS,proto3" json:"vel_e_mm_s,omitempty"`
	VelDMmS      int32  `protobuf:"varint,24,opt,name=vel_d_mm_s,json=velDMmS,proto3" json:"vel_d_mm_s,omitempty"`
	GSpeedMmS    int32  `protobuf:"varint,25,opt,name=g_speed_mm_s,json=gSpeedMmS,proto3" json:"g_speed_mm_s,omitempty"`
	HeadMotDege5 int32  `protobuf:"varint,26,opt,name=head_mot_dege5,json=headMotDege5,proto3" json:"head_mot_dege5,omitempty"`
	SAccMmS      uint32 `protobuf:"varint,27,opt,name=s_acc_mm_s,json=sAccMmS,proto3" json:"s_acc_mm_s,omitempty"`
	HeadAccDege5 int32  `protobuf:"varint,28,opt,name=head_acc_dege5,json=headAccDege5,proto3" json:"head_acc_dege5,omitempty"`
	Pdop         uint32 `protobuf:"varint,29,opt,name=pdop,proto3" json:"pdop,omitempty"`
	Flags3       uint32 `protobuf:"varint,30,opt,name=flags3,proto3" json:"flags3,omitempty"`
	HeadVehDege5 int32  `protobuf:"varint,31,opt,name=head_veh_dege5,json=headVehDege5,proto3" json:"head_veh_dege5,omitempty"`
	MagDecDege2  int32  `protobuf:"varint,32,opt,name=mag_dec_dege2,json=magDecDege2,proto3" json:"mag_dec_dege2,omitempty"`
	MagAccDege2  uint32 `protobuf:"varint,33,opt,name=mag_acc_dege2,json=magAccDege2,proto3" json:"mag_acc_dege2,omitempty"`
}

func (x *NavPvt) Reset() {
	*x = NavPvt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sensordata_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavPvt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavPvt) ProtoMessage() {}

func (x *NavPvt) ProtoReflect() protoreflect.Message {
	mi := &file_sensordata_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavPvt.ProtoReflect.Descriptor instead.
func (*NavPvt) Descriptor() ([]byte, []int) {
	return file_sensordata_proto_rawDescGZIP(), []int{5}
}

func (x *NavPvt) GetSystemTime() string {
	if x != nil {
		return x.SystemTime
	}
	return ""
}

func (x *NavPvt) GetItowMs() uint32 {
	if x != nil {
		return x.ItowMs
	}
	return 0
}

func (x *NavPvt) GetYearY() uint32 {
	if x != nil {
		return x.YearY
	}
	return 0
}

func (x *NavPvt) GetMonthMonth() uint32 {
	if x != nil {
		return x.MonthMonth
	}
	return 0
}

func (x *NavPvt) GetDayD() uint32 {
	if x != nil {
		return x.DayD
	}
	return 0
}

func (x *NavPvt) GetHourH() uint32 {
	if x != nil {
		return x.HourH
	}
	return 0
}

func (x *NavPvt) GetMinMin() uint32 {
	if x != nil {
		return x.MinMin
	}
	return 0
}

func (x *NavPvt) GetSecS() uint32 {
	if x != nil {
		return x.SecS
	}
	return 0
}

func (x *NavPvt) GetValid() uint32 {
	if x != nil {
		return x.Valid
	}
	return 0
}

func (x *NavPvt) GetTAccNs() uint32 {
	if x != nil {
		return x.TAccNs
	}
	return 0
}

func (x *NavPvt) GetNanoNs() uint32 {
	if x != nil {
		return x.NanoNs
	}
	return 0
}

func (x *NavPvt) GetFixType() uint32 {
	if x != nil {
		return x.FixType
	}
	return 0
}

func (x *NavPvt) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *NavPvt) GetFlags2() uint32 {
	if x != nil {
		return x.Flags2
	}
	return 0
}

func (x *NavPvt) GetNumSv() uint32 {
	if x != nil {
		return x.NumSv
	}
	return 0
}

func (x *NavPvt) GetLonDege7() int32 {
	if x != nil {
		return x.LonDege7
	}
	return 0
}

func (x *NavPvt) GetLatDege7() int32 {
	if x != nil {
		return x.LatDege7
	}
	return 0
}

func (x *NavPvt) GetHeightMm() int32 {
	if x != nil {
		return x.HeightMm
	}
	return 0
}

func (x *NavPvt) GetHmslMm() int32 {
	if x != nil {
		return x.HmslMm
	}
	return 0
}

func (x *NavPvt) GetHAccMm() uint32 {
	if x != nil {
		return x.HAccMm
	}
	return 0
}

func (x *NavPvt) GetVAccMm() uint32 {
	if x != nil {
		return x.VAccMm
	}
	return 0
}

func (x *NavPvt) GetVelNMmS() int32 {
	if x != nil {
		return x.VelNMmS
	}
	return 0
}

func (x *NavPvt) GetVelEMmS() int32 {
	if x != nil {
		return x.VelEMmS
	}
	return 0
}

func (x *NavPvt) GetVelDMmS() int32 {
	if x != nil {
		return x.VelDMmS
	}
	return 0
}

func (x *NavPvt) GetGSpeedMmS() int32 {
	if x != nil {
		return x.GSpeedMmS
	}
	return 0
}

func (x *NavPvt) GetHeadMotDege5() int32 {
	if x != nil {
		return x.HeadMotDege5
	}
	return 0
}

func (x *NavPvt) GetSAccMmS() uint32 {
	if x != nil {
		return x.SAccMmS
	}
	return 0
}

func (x *NavPvt) GetHeadAccDege5() int32 {
	if x != nil {
		return x.HeadAccDege5
	}
	return 0
}

func (x *NavPvt) GetPdop() uint32 {
	if x != nil {
		return x.Pdop
	}
	return 0
}

func (x *NavPvt) GetFlags3() uint32 {
	if x != nil {
		return x.Flags3
	}
	return 0
}

func (x *NavPvt) GetHeadVehDege5() int32 {
	if x != nil {
		return x.HeadVehDege5
	}
	return 0
}

func (x *NavPvt) GetMagDecDege2() int32 {
	if x != nil {
		return x.MagDecDege2
	}
	return 0
}

func (x *NavPvt) GetMagAccDege2() uint32 {
	if x != nil {
		return x.MagAccDege2
	}
	return 0
}

type MonRf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemTime string           `protobuf:"bytes,1,opt,name=system_time,json=systemTime,proto3" json:"system_time,omitempty"`
	Version    uint32           `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	NBlock     uint32           `protobuf:"varint,3,opt,name=n_block,json=nBlock,proto3" json:"n_block,omitempty"`
	RfBlocks   []*MonRf_RFBlock `protobuf:"bytes,4,rep,name=rf_blocks,json=rfBlocks,proto3" json:"rf_blocks,omitempty"`
}

func (x *MonRf) Reset() {
	*x = MonRf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sensordata_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonRf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonRf) ProtoMessage() {}

func (x *MonRf) ProtoReflect() protoreflect.Message {
	mi := &file_sensordata_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonRf.ProtoReflect.Descriptor instead.
func (*MonRf) Descriptor() ([]byte, []int) {
	return file_sensordata_proto_rawDescGZIP(), []int{6}
}

func (x *MonRf) GetSystemTime() string {
	if x != nil {
		return x.SystemTime
	}
	return ""
}

func (x *MonRf) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *MonRf) GetNBlock() uint32 {
	if x != nil {
		return x.NBlock
	}
	return 0
}

func (x *MonRf) GetRfBlocks() []*MonRf_RFBlock {
	if x != nil {
		return x.RfBlocks
	}
	return nil
}

type RxmMeasx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemTime     string                     `protobuf:"bytes,1,opt,name=system_time,json=systemTime,proto3" json:"system_time,omitempty"`
	Version        uint32                     `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	GpsTowMs       uint32                     `protobuf:"varint,3,opt,name=gps_tow_ms,json=gpsTowMs,proto3" json:"gps_tow_ms,omitempty"`
	GloTowMs       uint32                     `protobuf:"varint,4,opt,name=glo_tow_ms,json=gloTowMs,proto3" json:"glo_tow_ms,omitempty"`
	BdsTowMs       uint32                     `protobuf:"varint,5,opt,name=bds_tow_ms,json=bdsTowMs,proto3" json:"bds_tow_ms,omitempty"`
	QzssTowMs      uint32                     `protobuf:"varint,6,opt,name=qzss_tow_ms,json=qzssTowMs,proto3" json:"qzss_tow_ms,omitempty"`
	GpsTowAccMsl4  uint32                     `protobuf:"varint,7,opt,name=gps_tow_acc_msl4,json=gpsTowAccMsl4,proto3" json:"gps_tow_acc_msl4,omitempty"`
	GloTowAccMsl4  uint32                     `protobuf:"varint,8,opt,name=glo_tow_acc_msl4,json=gloTowAccMsl4,proto3" json:"glo_tow_acc_msl4,omitempty"`
	BdsTowAccMsl4  uint32                     `protobuf:"varint,9,opt,name=bds_tow_acc_msl4,json=bdsTowAccMsl4,proto3" json:"bds_tow_acc_msl4,omitempty"`
	QzssTowAccMsl4 uint32                     `protobuf:"varint,10,opt,name=qzss_tow_acc_msl4,json=qzssTowAccMsl4,proto3" json:"qzss_tow_acc_msl4,omitempty"`
	NumSv          uint32                     `protobuf:"varint,11,opt,name=num_sv,json=numSv,proto3" json:"num_sv,omitempty"`
	Flags          uint32                     `protobuf:"varint,12,opt,name=flags,proto3" json:"flags,omitempty"`
	Sv             []*RxmMeasx_RxmMeasxSVType `protobuf:"bytes,13,rep,name=sv,proto3" json:"sv,omitempty"`
}

func (x *RxmMeasx) Reset() {
	*x = RxmMeasx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sensordata_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RxmMeasx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RxmMeasx) ProtoMessage() {}

func (x *RxmMeasx) ProtoReflect() protoreflect.Message {
	mi := &file_sensordata_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RxmMeasx.ProtoReflect.Descriptor instead.
func (*RxmMeasx) Descriptor() ([]byte, []int) {
	return file_sensordata_proto_rawDescGZIP(), []int{7}
}

func (x *RxmMeasx) GetSystemTime() string {
	if x != nil {
		return x.SystemTime
	}
	return ""
}

func (x *RxmMeasx) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *RxmMeasx) GetGpsTowMs() uint32 {
	if x != nil {
		return x.GpsTowMs
	}
	return 0
}

func (x *RxmMeasx) GetGloTowMs() uint32 {
	if x != nil {
		return x.GloTowMs
	}
	return 0
}

func (x *RxmMeasx) GetBdsTowMs() uint32 {
	if x != nil {
		return x.BdsTowMs
	}
	return 0
}

func (x *RxmMeasx) GetQzssTowMs() uint32 {
	if x != nil {
		return x.QzssTowMs
	}
	return 0
}

func (x *RxmMeasx) GetGpsTowAccMsl4() uint32 {
	if x != nil {
		return x.GpsTowAccMsl4
	}
	return 0
}

func (x *RxmMeasx) GetGloTowAccMsl4() uint32 {
	if x != nil {
		return x.GloTowAccMsl4
	}
	return 0
}

func (x *RxmMeasx) GetBdsTowAccMsl4() uint32 {
	if x != nil {
		return x.BdsTowAccMsl4
	}
	return 0
}

func (x *RxmMeasx) GetQzssTowAccMsl4() uint32 {
	if x != nil {
		return x.QzssTowAccMsl4
	}
	return 0
}

func (x *RxmMeasx) GetNumSv() uint32 {
	if x != nil {
		return x.NumSv
	}
	return 0
}

func (x *RxmMeasx) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *RxmMeasx) GetSv() []*RxmMeasx_RxmMeasxSVType {
	if x != nil {
		return x.Sv
	}
	return nil
}

type ImuData_AccelerometerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float64 `protobuf:"fixed64,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *ImuData_AccelerometerData) Reset() {
	*x = ImuData_AccelerometerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sensordata_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImuData_AccelerometerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImuData_AccelerometerData) ProtoMessage() {}

func (x *ImuData_AccelerometerData) ProtoReflect() protoreflect.Message {
	mi := &file_sensordata_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImuData_AccelerometerData.ProtoReflect.Descriptor instead.
func (*ImuData_AccelerometerData) Descriptor() ([]byte, []int) {
	return file_sensordata_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ImuData_AccelerometerData) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *ImuData_AccelerometerData) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *ImuData_AccelerometerData) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

type ImuData_GyroscopeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float64 `protobuf:"fixed64,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *ImuData_GyroscopeData) Reset() {
	*x = ImuData_GyroscopeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sensordata_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImuData_GyroscopeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImuData_GyroscopeData) ProtoMessage() {}

func (x *ImuData_GyroscopeData) ProtoReflect() protoreflect.Message {
	mi := &file_sensordata_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImuData_GyroscopeData.ProtoReflect.Descriptor instead.
func (*ImuData_GyroscopeData) Descriptor() ([]byte, []int) {
	return file_sensordata_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ImuData_GyroscopeData) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *ImuData_GyroscopeData) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *ImuData_GyroscopeData) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

type GnssData_Dop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gdop float64 `protobuf:"fixed64,1,opt,name=gdop,proto3" json:"gdop,omitempty"`
	Hdop float64 `protobuf:"fixed64,2,opt,name=hdop,proto3" json:"hdop,omitempty"`
	Pdop float64 `protobuf:"fixed64,3,opt,name=pdop,proto3" json:"pdop,omitempty"`
	Tdop float64 `protobuf:"fixed64,4,opt,name=tdop,proto3" json:"tdop,omitempty"`
	Vdop float64 `protobuf:"fixed64,5,opt,name=vdop,proto3" json:"vdop,omitempty"`
	Xdop float64 `protobuf:"fixed64,6,opt,name=xdop,proto3" json:"xdop,omitempty"`
	Ydop float64 `protobuf:"fixed64,7,opt,name=ydop,proto3" json:"ydop,omitempty"`
}

func (x *GnssData_Dop) Reset() {
	*x = GnssData_Dop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sensordata_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GnssData_Dop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GnssData_Dop) ProtoMessage() {}

func (x *GnssData_Dop) ProtoReflect() protoreflect.Message {
	mi := &file_sensordata_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GnssData_Dop.ProtoReflect.Descriptor instead.
func (*GnssData_Dop) Descriptor() ([]byte, []int) {
	return file_sensordata_proto_rawDescGZIP(), []int{2, 0}
}

func (x *GnssData_Dop) GetGdop() float64 {
	if x != nil {
		return x.Gdop
	}
	return 0
}

func (x *GnssData_Dop) GetHdop() float64 {
	if x != nil {
		return x.Hdop
	}
	return 0
}

func (x *GnssData_Dop) GetPdop() float64 {
	if x != nil {
		return x.Pdop
	}
	return 0
}

func (x *GnssData_Dop) GetTdop() float64 {
	if x != nil {
		return x.Tdop
	}
	return 0
}

func (x *GnssData_Dop) GetVdop() float64 {
	if x != nil {
		return x.Vdop
	}
	return 0
}

func (x *GnssData_Dop) GetXdop() float64 {
	if x != nil {
		return x.Xdop
	}
	return 0
}

func (x *GnssData_Dop) GetYdop() float64 {
	if x != nil {
		return x.Ydop
	}
	return 0
}

type GnssData_Satellites struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seen int64 `protobuf:"varint,1,opt,name=seen,proto3" json:"seen,omitempty"`
	Used int64 `protobuf:"varint,2,opt,name=used,proto3" json:"used,omitempty"`
}

func (x *GnssData_Satellites) Reset() {
	*x = GnssData_Satellites{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sensordata_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GnssData_Satellites) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GnssData_Satellites) ProtoMessage() {}

func (x *GnssData_Satellites) ProtoReflect() protoreflect.Message {
	mi := &file_sensordata_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GnssData_Satellites.ProtoReflect.Descriptor instead.
func (*GnssData_Satellites) Descriptor() ([]byte, []int) {
	return file_sensordata_proto_rawDescGZIP(), []int{2, 1}
}

func (x *GnssData_Satellites) GetSeen() int64 {
	if x != nil {
		return x.Seen
	}
	return 0
}

func (x *GnssData_Satellites) GetUsed() int64 {
	if x != nil {
		return x.Used
	}
	return 0
}

type GnssData_RF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JammingState string `protobuf:"bytes,1,opt,name=jamming_state,json=jammingState,proto3" json:"jamming_state,omitempty"`
	AntStatus    string `protobuf:"bytes,2,opt,name=ant_status,json=antStatus,proto3" json:"ant_status,omitempty"`
	AntPower     string `protobuf:"bytes,3,opt,name=ant_power,json=antPower,proto3" json:"ant_power,omitempty"`
	PostStatus   uint32 `protobuf:"varint,4,opt,name=post_status,json=postStatus,proto3" json:"post_status,omitempty"`
	NoisePerMs   uint32 `protobuf:"varint,5,opt,name=noise_per_ms,json=noisePerMs,proto3" json:"noise_per_ms,omitempty"`
	AgcCnt       uint32 `protobuf:"varint,6,opt,name=agc_cnt,json=agcCnt,proto3" json:"agc_cnt,omitempty"`
	JamInd       uint32 `protobuf:"varint,7,opt,name=jam_ind,json=jamInd,proto3" json:"jam_ind,omitempty"`
	OfsI         int32  `protobuf:"varint,8,opt,name=ofs_i,json=ofsI,proto3" json:"ofs_i,omitempty"`
	MagI         int32  `protobuf:"varint,9,opt,name=mag_i,json=magI,proto3" json:"mag_i,omitempty"`
	OfsQ         int32  `protobuf:"varint,10,opt,name=ofs_q,json=ofsQ,proto3" json:"ofs_q,omitempty"`
	MagQ         int32  `protobuf:"varint,11,opt,name=mag_q,json=magQ,proto3" json:"mag_q,omitempty"`
}

func (x *GnssData_RF) Reset() {
	*x = GnssData_RF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sensordata_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GnssData_RF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GnssData_RF) ProtoMessage() {}

func (x *GnssData_RF) ProtoReflect() protoreflect.Message {
	mi := &file_sensordata_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GnssData_RF.ProtoReflect.Descriptor instead.
func (*GnssData_RF) Descriptor() ([]byte, []int) {
	return file_sensordata_proto_rawDescGZIP(), []int{2, 2}
}

func (x *GnssData_RF) GetJammingState() string {
	if x != nil {
		return x.JammingState
	}
	return ""
}

func (x *GnssData_RF) GetAntStatus() string {
	if x != nil {
		return x.AntStatus
	}
	return ""
}

func (x *GnssData_RF) GetAntPower() string {
	if x != nil {
		return x.AntPower
	}
	return ""
}

func (x *GnssData_RF) GetPostStatus() uint32 {
	if x != nil {
		return x.PostStatus
	}
	return 0
}

func (x *GnssData_RF) GetNoisePerMs() uint32 {
	if x != nil {
		return x.NoisePerMs
	}
	return 0
}

func (x *GnssData_RF) GetAgcCnt() uint32 {
	if x != nil {
		return x.AgcCnt
	}
	return 0
}

func (x *GnssData_RF) GetJamInd() uint32 {
	if x != nil {
		return x.JamInd
	}
	return 0
}

func (x *GnssData_RF) GetOfsI() int32 {
	if x != nil {
		return x.OfsI
	}
	return 0
}

func (x *GnssData_RF) GetMagI() int32 {
	if x != nil {
		return x.MagI
	}
	return 0
}

func (x *GnssData_RF) GetOfsQ() int32 {
	if x != nil {
		return x.OfsQ
	}
	return 0
}

func (x *GnssData_RF) GetMagQ() int32 {
	if x != nil {
		return x.MagQ
	}
	return 0
}

type GnssData_RxmMeasxSVType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GnssId          int32  `protobuf:"varint,1,opt,name=gnss_id,json=gnssId,proto3" json:"gnss_id,omitempty"`
	SvId            int32  `protobuf:"varint,2,opt,name=sv_id,json=svId,proto3" json:"sv_id,omitempty"`
	CNo             int32  `protobuf:"varint,3,opt,name=c_no,json=cNo,proto3" json:"c_no,omitempty"`
	MpathIndic      int32  `protobuf:"varint,4,opt,name=mpath_indic,json=mpathIndic,proto3" json:"mpath_indic,omitempty"`
	DopplerMsMS     int32  `protobuf:"varint,5,opt,name=doppler_ms_m_s,json=dopplerMsMS,proto3" json:"doppler_ms_m_s,omitempty"`
	DopplerHzHz     int32  `protobuf:"varint,6,opt,name=doppler_hz_hz,json=dopplerHzHz,proto3" json:"doppler_hz_hz,omitempty"`
	WholeChips      uint32 `protobuf:"varint,7,opt,name=whole_chips,json=wholeChips,proto3" json:"whole_chips,omitempty"`
	FracChips       uint32 `protobuf:"varint,8,opt,name=frac_chips,json=fracChips,proto3" json:"frac_chips,omitempty"`
	CodePhaseMsl_21 int32  `protobuf:"varint,9,opt,name=code_phase_msl_21,json=codePhaseMsl21,proto3" json:"code_phase_msl_21,omitempty"`
	IntCodePhaseMs  int32  `protobuf:"varint,10,opt,name=int_code_phase_ms,json=intCodePhaseMs,proto3" json:"int_code_phase_ms,omitempty"`
	PseuRangeRmsErr int32  `protobuf:"varint,11,opt,name=pseu_range_rms_err,json=pseuRangeRmsErr,proto3" json:"pseu_range_rms_err,omitempty"`
	Reserved5       []byte `protobuf:"bytes,12,opt,name=reserved5,proto3" json:"reserved5,omitempty"`
}

func (x *GnssData_RxmMeasxSVType) Reset() {
	*x = GnssData_RxmMeasxSVType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sensordata_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GnssData_RxmMeasxSVType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GnssData_RxmMeasxSVType) ProtoMessage() {}

func (x *GnssData_RxmMeasxSVType) ProtoReflect() protoreflect.Message {
	mi := &file_sensordata_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GnssData_RxmMeasxSVType.ProtoReflect.Descriptor instead.
func (*GnssData_RxmMeasxSVType) Descriptor() ([]byte, []int) {
	return file_sensordata_proto_rawDescGZIP(), []int{2, 3}
}

func (x *GnssData_RxmMeasxSVType) GetGnssId() int32 {
	if x != nil {
		return x.GnssId
	}
	return 0
}

func (x *GnssData_RxmMeasxSVType) GetSvId() int32 {
	if x != nil {
		return x.SvId
	}
	return 0
}

func (x *GnssData_RxmMeasxSVType) GetCNo() int32 {
	if x != nil {
		return x.CNo
	}
	return 0
}

func (x *GnssData_RxmMeasxSVType) GetMpathIndic() int32 {
	if x != nil {
		return x.MpathIndic
	}
	return 0
}

func (x *GnssData_RxmMeasxSVType) GetDopplerMsMS() int32 {
	if x != nil {
		return x.DopplerMsMS
	}
	return 0
}

func (x *GnssData_RxmMeasxSVType) GetDopplerHzHz() int32 {
	if x != nil {
		return x.DopplerHzHz
	}
	return 0
}

func (x *GnssData_RxmMeasxSVType) GetWholeChips() uint32 {
	if x != nil {
		return x.WholeChips
	}
	return 0
}

func (x *GnssData_RxmMeasxSVType) GetFracChips() uint32 {
	if x != nil {
		return x.FracChips
	}
	return 0
}

func (x *GnssData_RxmMeasxSVType) GetCodePhaseMsl_21() int32 {
	if x != nil {
		return x.CodePhaseMsl_21
	}
	return 0
}

func (x *GnssData_RxmMeasxSVType) GetIntCodePhaseMs() int32 {
	if x != nil {
		return x.IntCodePhaseMs
	}
	return 0
}

func (x *GnssData_RxmMeasxSVType) GetPseuRangeRmsErr() int32 {
	if x != nil {
		return x.PseuRangeRmsErr
	}
	return 0
}

func (x *GnssData_RxmMeasxSVType) GetReserved5() []byte {
	if x != nil {
		return x.Reserved5
	}
	return nil
}

type GnssData_RxmMeasx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version        int32                      `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Reserved1      []byte                     `protobuf:"bytes,2,opt,name=reserved1,proto3" json:"reserved1,omitempty"`
	GpsTowMs       uint32                     `protobuf:"varint,3,opt,name=gps_tow_ms,json=gpsTowMs,proto3" json:"gps_tow_ms,omitempty"`
	GloTowMs       uint32                     `protobuf:"varint,4,opt,name=glo_tow_ms,json=gloTowMs,proto3" json:"glo_tow_ms,omitempty"`
	BdsTowMs       uint32                     `protobuf:"varint,5,opt,name=bds_tow_ms,json=bdsTowMs,proto3" json:"bds_tow_ms,omitempty"`
	Reserved2      []byte                     `protobuf:"bytes,6,opt,name=reserved2,proto3" json:"reserved2,omitempty"`
	QzssTowMs      uint32                     `protobuf:"varint,7,opt,name=qzss_tow_ms,json=qzssTowMs,proto3" json:"qzss_tow_ms,omitempty"`
	GpsTowAccMsl4  uint32                     `protobuf:"varint,8,opt,name=gps_tow_acc_msl4,json=gpsTowAccMsl4,proto3" json:"gps_tow_acc_msl4,omitempty"`
	GloTowAccMsl4  uint32                     `protobuf:"varint,9,opt,name=glo_tow_acc_msl4,json=gloTowAccMsl4,proto3" json:"glo_tow_acc_msl4,omitempty"`
	BdsTowAccMsl4  uint32                     `protobuf:"varint,10,opt,name=bds_tow_acc_msl4,json=bdsTowAccMsl4,proto3" json:"bds_tow_acc_msl4,omitempty"`
	Reserved3      []byte                     `protobuf:"bytes,11,opt,name=reserved3,proto3" json:"reserved3,omitempty"`
	QzssTowAccMsl4 uint32                     `protobuf:"varint,12,opt,name=qzss_tow_acc_msl4,json=qzssTowAccMsl4,proto3" json:"qzss_tow_acc_msl4,omitempty"`
	NumSv          int32                      `protobuf:"varint,13,opt,name=num_sv,json=numSv,proto3" json:"num_sv,omitempty"`
	Flags          int32                      `protobuf:"varint,14,opt,name=flags,proto3" json:"flags,omitempty"`
	Reserved4      []byte                     `protobuf:"bytes,15,opt,name=reserved4,proto3" json:"reserved4,omitempty"`
	Sv             []*GnssData_RxmMeasxSVType `protobuf:"bytes,16,rep,name=sv,proto3" json:"sv,omitempty"`
}

func (x *GnssData_RxmMeasx) Reset() {
	*x = GnssData_RxmMeasx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sensordata_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GnssData_RxmMeasx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GnssData_RxmMeasx) ProtoMessage() {}

func (x *GnssData_RxmMeasx) ProtoReflect() protoreflect.Message {
	mi := &file_sensordata_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GnssData_RxmMeasx.ProtoReflect.Descriptor instead.
func (*GnssData_RxmMeasx) Descriptor() ([]byte, []int) {
	return file_sensordata_proto_rawDescGZIP(), []int{2, 4}
}

func (x *GnssData_RxmMeasx) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *GnssData_RxmMeasx) GetReserved1() []byte {
	if x != nil {
		return x.Reserved1
	}
	return nil
}

func (x *GnssData_RxmMeasx) GetGpsTowMs() uint32 {
	if x != nil {
		return x.GpsTowMs
	}
	return 0
}

func (x *GnssData_RxmMeasx) GetGloTowMs() uint32 {
	if x != nil {
		return x.GloTowMs
	}
	return 0
}

func (x *GnssData_RxmMeasx) GetBdsTowMs() uint32 {
	if x != nil {
		return x.BdsTowMs
	}
	return 0
}

func (x *GnssData_RxmMeasx) GetReserved2() []byte {
	if x != nil {
		return x.Reserved2
	}
	return nil
}

func (x *GnssData_RxmMeasx) GetQzssTowMs() uint32 {
	if x != nil {
		return x.QzssTowMs
	}
	return 0
}

func (x *GnssData_RxmMeasx) GetGpsTowAccMsl4() uint32 {
	if x != nil {
		return x.GpsTowAccMsl4
	}
	return 0
}

func (x *GnssData_RxmMeasx) GetGloTowAccMsl4() uint32 {
	if x != nil {
		return x.GloTowAccMsl4
	}
	return 0
}

func (x *GnssData_RxmMeasx) GetBdsTowAccMsl4() uint32 {
	if x != nil {
		return x.BdsTowAccMsl4
	}
	return 0
}

func (x *GnssData_RxmMeasx) GetReserved3() []byte {
	if x != nil {
		return x.Reserved3
	}
	return nil
}

func (x *GnssData_RxmMeasx) GetQzssTowAccMsl4() uint32 {
	if x != nil {
		return x.QzssTowAccMsl4
	}
	return 0
}

func (x *GnssData_RxmMeasx) GetNumSv() int32 {
	if x != nil {
		return x.NumSv
	}
	return 0
}

func (x *GnssData_RxmMeasx) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *GnssData_RxmMeasx) GetReserved4() []byte {
	if x != nil {
		return x.Reserved4
	}
	return nil
}

func (x *GnssData_RxmMeasx) GetSv() []*GnssData_RxmMeasxSVType {
	if x != nil {
		return x.Sv
	}
	return nil
}

type GnssData_UbxSecEcsign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version        uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Reserved0      []byte `protobuf:"bytes,2,opt,name=reserved0,proto3" json:"reserved0,omitempty"`
	MsgNum         uint32 `protobuf:"varint,3,opt,name=msg_num,json=msgNum,proto3" json:"msg_num,omitempty"`
	FinalHash      []byte `protobuf:"bytes,4,opt,name=final_hash,json=finalHash,proto3" json:"final_hash,omitempty"`
	SessionId      []byte `protobuf:"bytes,5,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	EcdsaSignature []byte `protobuf:"bytes,6,opt,name=ecdsa_signature,json=ecdsaSignature,proto3" json:"ecdsa_signature,omitempty"`
}

func (x *GnssData_UbxSecEcsign) Reset() {
	*x = GnssData_UbxSecEcsign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sensordata_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GnssData_UbxSecEcsign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GnssData_UbxSecEcsign) ProtoMessage() {}

func (x *GnssData_UbxSecEcsign) ProtoReflect() protoreflect.Message {
	mi := &file_sensordata_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GnssData_UbxSecEcsign.ProtoReflect.Descriptor instead.
func (*GnssData_UbxSecEcsign) Descriptor() ([]byte, []int) {
	return file_sensordata_proto_rawDescGZIP(), []int{2, 5}
}

func (x *GnssData_UbxSecEcsign) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *GnssData_UbxSecEcsign) GetReserved0() []byte {
	if x != nil {
		return x.Reserved0
	}
	return nil
}

func (x *GnssData_UbxSecEcsign) GetMsgNum() uint32 {
	if x != nil {
		return x.MsgNum
	}
	return 0
}

func (x *GnssData_UbxSecEcsign) GetFinalHash() []byte {
	if x != nil {
		return x.FinalHash
	}
	return nil
}

func (x *GnssData_UbxSecEcsign) GetSessionId() []byte {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *GnssData_UbxSecEcsign) GetEcdsaSignature() []byte {
	if x != nil {
		return x.EcdsaSignature
	}
	return nil
}

type NavSat_Svs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GnssId   uint32 `protobuf:"varint,1,opt,name=gnss_id,json=gnssId,proto3" json:"gnss_id,omitempty"`
	SvId     uint32 `protobuf:"varint,2,opt,name=sv_id,json=svId,proto3" json:"sv_id,omitempty"`
	CnoDbhz  uint32 `protobuf:"varint,3,opt,name=cno_dbhz,json=cnoDbhz,proto3" json:"cno_dbhz,omitempty"`
	ElevDeg  int32  `protobuf:"varint,4,opt,name=elev_deg,json=elevDeg,proto3" json:"elev_deg,omitempty"`
	AzimDeg  int32  `protobuf:"varint,5,opt,name=azim_deg,json=azimDeg,proto3" json:"azim_deg,omitempty"`
	PrResMe1 int32  `protobuf:"varint,6,opt,name=pr_res_me1,json=prResMe1,proto3" json:"pr_res_me1,omitempty"`
	Flags    uint32 `protobuf:"varint,7,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *NavSat_Svs) Reset() {
	*x = NavSat_Svs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sensordata_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavSat_Svs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavSat_Svs) ProtoMessage() {}

func (x *NavSat_Svs) ProtoReflect() protoreflect.Message {
	mi := &file_sensordata_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavSat_Svs.ProtoReflect.Descriptor instead.
func (*NavSat_Svs) Descriptor() ([]byte, []int) {
	return file_sensordata_proto_rawDescGZIP(), []int{4, 0}
}

func (x *NavSat_Svs) GetGnssId() uint32 {
	if x != nil {
		return x.GnssId
	}
	return 0
}

func (x *NavSat_Svs) GetSvId() uint32 {
	if x != nil {
		return x.SvId
	}
	return 0
}

func (x *NavSat_Svs) GetCnoDbhz() uint32 {
	if x != nil {
		return x.CnoDbhz
	}
	return 0
}

func (x *NavSat_Svs) GetElevDeg() int32 {
	if x != nil {
		return x.ElevDeg
	}
	return 0
}

func (x *NavSat_Svs) GetAzimDeg() int32 {
	if x != nil {
		return x.AzimDeg
	}
	return 0
}

func (x *NavSat_Svs) GetPrResMe1() int32 {
	if x != nil {
		return x.PrResMe1
	}
	return 0
}

func (x *NavSat_Svs) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type MonRf_RFBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockId    uint32 `protobuf:"varint,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	Flags      uint32 `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	AntStatus  uint32 `protobuf:"varint,3,opt,name=ant_status,json=antStatus,proto3" json:"ant_status,omitempty"`
	AntPower   uint32 `protobuf:"varint,4,opt,name=ant_power,json=antPower,proto3" json:"ant_power,omitempty"`
	PostStatus uint32 `protobuf:"varint,5,opt,name=post_status,json=postStatus,proto3" json:"post_status,omitempty"`
	NoisePerMs uint32 `protobuf:"varint,6,opt,name=noise_per_ms,json=noisePerMs,proto3" json:"noise_per_ms,omitempty"`
	AgcCnt     uint32 `protobuf:"varint,7,opt,name=agc_cnt,json=agcCnt,proto3" json:"agc_cnt,omitempty"`
	JamInd     int32  `protobuf:"varint,8,opt,name=jam_ind,json=jamInd,proto3" json:"jam_ind,omitempty"`
	OfsI       int32  `protobuf:"varint,9,opt,name=ofs_i,json=ofsI,proto3" json:"ofs_i,omitempty"`
	MagI       uint32 `protobuf:"varint,10,opt,name=mag_i,json=magI,proto3" json:"mag_i,omitempty"`
	OfsQ       int32  `protobuf:"varint,11,opt,name=ofs_q,json=ofsQ,proto3" json:"ofs_q,omitempty"`
	MagQ       uint32 `protobuf:"varint,12,opt,name=mag_q,json=magQ,proto3" json:"mag_q,omitempty"`
}

func (x *MonRf_RFBlock) Reset() {
	*x = MonRf_RFBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sensordata_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonRf_RFBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonRf_RFBlock) ProtoMessage() {}

func (x *MonRf_RFBlock) ProtoReflect() protoreflect.Message {
	mi := &file_sensordata_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonRf_RFBlock.ProtoReflect.Descriptor instead.
func (*MonRf_RFBlock) Descriptor() ([]byte, []int) {
	return file_sensordata_proto_rawDescGZIP(), []int{6, 0}
}

func (x *MonRf_RFBlock) GetBlockId() uint32 {
	if x != nil {
		return x.BlockId
	}
	return 0
}

func (x *MonRf_RFBlock) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *MonRf_RFBlock) GetAntStatus() uint32 {
	if x != nil {
		return x.AntStatus
	}
	return 0
}

func (x *MonRf_RFBlock) GetAntPower() uint32 {
	if x != nil {
		return x.AntPower
	}
	return 0
}

func (x *MonRf_RFBlock) GetPostStatus() uint32 {
	if x != nil {
		return x.PostStatus
	}
	return 0
}

func (x *MonRf_RFBlock) GetNoisePerMs() uint32 {
	if x != nil {
		return x.NoisePerMs
	}
	return 0
}

func (x *MonRf_RFBlock) GetAgcCnt() uint32 {
	if x != nil {
		return x.AgcCnt
	}
	return 0
}

func (x *MonRf_RFBlock) GetJamInd() int32 {
	if x != nil {
		return x.JamInd
	}
	return 0
}

func (x *MonRf_RFBlock) GetOfsI() int32 {
	if x != nil {
		return x.OfsI
	}
	return 0
}

func (x *MonRf_RFBlock) GetMagI() uint32 {
	if x != nil {
		return x.MagI
	}
	return 0
}

func (x *MonRf_RFBlock) GetOfsQ() int32 {
	if x != nil {
		return x.OfsQ
	}
	return 0
}

func (x *MonRf_RFBlock) GetMagQ() uint32 {
	if x != nil {
		return x.MagQ
	}
	return 0
}

type RxmMeasx_RxmMeasxSVType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GnssId          uint32 `protobuf:"varint,1,opt,name=gnss_id,json=gnssId,proto3" json:"gnss_id,omitempty"`
	SvId            uint32 `protobuf:"varint,2,opt,name=sv_id,json=svId,proto3" json:"sv_id,omitempty"`
	CNo             uint32 `protobuf:"varint,3,opt,name=c_no,json=cNo,proto3" json:"c_no,omitempty"`
	MpathIndic      uint32 `protobuf:"varint,4,opt,name=mpath_indic,json=mpathIndic,proto3" json:"mpath_indic,omitempty"`
	DopplerMsMS     int32  `protobuf:"varint,5,opt,name=doppler_ms_m_s,json=dopplerMsMS,proto3" json:"doppler_ms_m_s,omitempty"`
	DopplerHzHz     int32  `protobuf:"varint,6,opt,name=doppler_hz_hz,json=dopplerHzHz,proto3" json:"doppler_hz_hz,omitempty"`
	WholeChips      uint32 `protobuf:"varint,7,opt,name=whole_chips,json=wholeChips,proto3" json:"whole_chips,omitempty"`
	FracChips       uint32 `protobuf:"varint,8,opt,name=frac_chips,json=fracChips,proto3" json:"frac_chips,omitempty"`
	CodePhaseMsl_21 uint32 `protobuf:"varint,9,opt,name=code_phase_msl_21,json=codePhaseMsl21,proto3" json:"code_phase_msl_21,omitempty"`
	IntCodePhaseMs  uint32 `protobuf:"varint,10,opt,name=int_code_phase_ms,json=intCodePhaseMs,proto3" json:"int_code_phase_ms,omitempty"`
	PseuRangeRmsErr uint32 `protobuf:"varint,11,opt,name=pseu_range_rms_err,json=pseuRangeRmsErr,proto3" json:"pseu_range_rms_err,omitempty"`
}

func (x *RxmMeasx_RxmMeasxSVType) Reset() {
	*x = RxmMeasx_RxmMeasxSVType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sensordata_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RxmMeasx_RxmMeasxSVType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RxmMeasx_RxmMeasxSVType) ProtoMessage() {}

func (x *RxmMeasx_RxmMeasxSVType) ProtoReflect() protoreflect.Message {
	mi := &file_sensordata_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RxmMeasx_RxmMeasxSVType.ProtoReflect.Descriptor instead.
func (*RxmMeasx_RxmMeasxSVType) Descriptor() ([]byte, []int) {
	return file_sensordata_proto_rawDescGZIP(), []int{7, 0}
}

func (x *RxmMeasx_RxmMeasxSVType) GetGnssId() uint32 {
	if x != nil {
		return x.GnssId
	}
	return 0
}

func (x *RxmMeasx_RxmMeasxSVType) GetSvId() uint32 {
	if x != nil {
		return x.SvId
	}
	return 0
}

func (x *RxmMeasx_RxmMeasxSVType) GetCNo() uint32 {
	if x != nil {
		return x.CNo
	}
	return 0
}

func (x *RxmMeasx_RxmMeasxSVType) GetMpathIndic() uint32 {
	if x != nil {
		return x.MpathIndic
	}
	return 0
}

func (x *RxmMeasx_RxmMeasxSVType) GetDopplerMsMS() int32 {
	if x != nil {
		return x.DopplerMsMS
	}
	return 0
}

func (x *RxmMeasx_RxmMeasxSVType) GetDopplerHzHz() int32 {
	if x != nil {
		return x.DopplerHzHz
	}
	return 0
}

func (x *RxmMeasx_RxmMeasxSVType) GetWholeChips() uint32 {
	if x != nil {
		return x.WholeChips
	}
	return 0
}

func (x *RxmMeasx_RxmMeasxSVType) GetFracChips() uint32 {
	if x != nil {
		return x.FracChips
	}
	return 0
}

func (x *RxmMeasx_RxmMeasxSVType) GetCodePhaseMsl_21() uint32 {
	if x != nil {
		return x.CodePhaseMsl_21
	}
	return 0
}

func (x *RxmMeasx_RxmMeasxSVType) GetIntCodePhaseMs() uint32 {
	if x != nil {
		return x.IntCodePhaseMs
	}
	return 0
}

func (x *RxmMeasx_RxmMeasxSVType) GetPseuRangeRmsErr() uint32 {
	if x != nil {
		return x.PseuRangeRmsErr
	}
	return 0
}

var File_sensordata_proto protoreflect.FileDescriptor

var file_sensordata_proto_rawDesc = []byte{
	0x0a, 0x10, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xd2, 0x02, 0x0a, 0x07, 0x49, 0x6d, 0x75, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x40, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x49, 0x6d, 0x75, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x12, 0x34, 0x0a, 0x09, 0x67, 0x79, 0x72, 0x6f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x49, 0x6d, 0x75, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x47,
	0x79, 0x72, 0x6f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x67, 0x79,
	0x72, 0x6f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0x3d, 0x0a,
	0x11, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78,
	0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x12, 0x0c,
	0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x7a, 0x1a, 0x39, 0x0a, 0x0d,
	0x47, 0x79, 0x72, 0x6f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0c, 0x0a,
	0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x7a, 0x22, 0x5d, 0x0a, 0x10, 0x4d, 0x61, 0x67, 0x6e, 0x65,
	0x74, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0c, 0x0a, 0x01,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x01, 0x7a, 0x22, 0x94, 0x14, 0x0a, 0x08, 0x47, 0x6e, 0x73, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x74, 0x66, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x74, 0x66, 0x66, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x66, 0x69, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x75, 0x6e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x5f, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x12, 0x75, 0x6e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x31, 0x0a, 0x14, 0x75, 0x6e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x13, 0x75, 0x6e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x12, 0x1f, 0x0a, 0x03, 0x64, 0x6f, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x47, 0x6e, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x6f, 0x70, 0x52, 0x03, 0x64, 0x6f,
	0x70, 0x12, 0x34, 0x0a, 0x0a, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x47, 0x6e, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x73, 0x61, 0x74,
	0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x70, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x73, 0x65, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x70, 0x68,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x65, 0x70, 0x68, 0x12, 0x1c, 0x0a, 0x02, 0x72,
	0x66, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x47, 0x6e, 0x73, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x46, 0x52, 0x02, 0x72, 0x66, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x65, 0x64, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79,
	0x12, 0x29, 0x0a, 0x10, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x75,
	0x72, 0x61, 0x63, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x68, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64,
	0x12, 0x2f, 0x0a, 0x13, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x61,
	0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63,
	0x79, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x63,
	0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x67, 0x67, 0x61, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x67, 0x61,
	0x12, 0x2f, 0x0a, 0x09, 0x72, 0x78, 0x6d, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x78, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x47, 0x6e, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52,
	0x78, 0x6d, 0x4d, 0x65, 0x61, 0x73, 0x78, 0x52, 0x08, 0x72, 0x78, 0x6d, 0x4d, 0x65, 0x61, 0x73,
	0x78, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x5f, 0x65, 0x63, 0x73, 0x69, 0x67, 0x6e, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x47, 0x6e, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x55, 0x62, 0x78, 0x53, 0x65, 0x63, 0x45, 0x63, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x09, 0x73,
	0x65, 0x63, 0x45, 0x63, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x5f,
	0x65, 0x63, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x45, 0x63, 0x73, 0x69, 0x67, 0x6e, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x1a, 0x91, 0x01, 0x0a, 0x03, 0x44, 0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x67, 0x64, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x67, 0x64, 0x6f, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x64, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x68, 0x64, 0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x64, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x70, 0x64, 0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x64, 0x6f, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x64, 0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x76, 0x64, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x76, 0x64, 0x6f, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x78, 0x64, 0x6f, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x78, 0x64, 0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x64, 0x6f, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x79, 0x64, 0x6f, 0x70, 0x1a, 0x34, 0x0a, 0x0a, 0x53, 0x61, 0x74, 0x65,
	0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x65, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x1a, 0xae,
	0x02, 0x0a, 0x02, 0x52, 0x46, 0x12, 0x23, 0x0a, 0x0d, 0x6a, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6a, 0x61,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x74,
	0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6e,
	0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x6f, 0x69, 0x73, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e,
	0x6f, 0x69, 0x73, 0x65, 0x50, 0x65, 0x72, 0x4d, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x67, 0x63,
	0x5f, 0x63, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x67, 0x63, 0x43,
	0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6a, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x6a, 0x61, 0x6d, 0x49, 0x6e, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x6f,
	0x66, 0x73, 0x5f, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6f, 0x66, 0x73, 0x49,
	0x12, 0x13, 0x0a, 0x05, 0x6d, 0x61, 0x67, 0x5f, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x6d, 0x61, 0x67, 0x49, 0x12, 0x13, 0x0a, 0x05, 0x6f, 0x66, 0x73, 0x5f, 0x71, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6f, 0x66, 0x73, 0x51, 0x12, 0x13, 0x0a, 0x05, 0x6d, 0x61,
	0x67, 0x5f, 0x71, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x61, 0x67, 0x51, 0x1a,
	0x9c, 0x03, 0x0a, 0x0e, 0x52, 0x78, 0x6d, 0x4d, 0x65, 0x61, 0x73, 0x78, 0x53, 0x56, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x6e, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x6e, 0x73, 0x73, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x73,
	0x76, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x76, 0x49, 0x64,
	0x12, 0x11, 0x0a, 0x04, 0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x63, 0x4e, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x70, 0x61, 0x74, 0x68, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x12, 0x23, 0x0a, 0x0e, 0x64, 0x6f, 0x70, 0x70, 0x6c, 0x65, 0x72, 0x5f,
	0x6d, 0x73, 0x5f, 0x6d, 0x5f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x6f,
	0x70, 0x70, 0x6c, 0x65, 0x72, 0x4d, 0x73, 0x4d, 0x53, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x6f, 0x70,
	0x70, 0x6c, 0x65, 0x72, 0x5f, 0x68, 0x7a, 0x5f, 0x68, 0x7a, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x64, 0x6f, 0x70, 0x70, 0x6c, 0x65, 0x72, 0x48, 0x7a, 0x48, 0x7a, 0x12, 0x1f, 0x0a,
	0x0b, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x72, 0x61, 0x63, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x66, 0x72, 0x61, 0x63, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x29, 0x0a,
	0x11, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x73, 0x6c, 0x5f,
	0x32, 0x31, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x64, 0x65, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x4d, 0x73, 0x6c, 0x32, 0x31, 0x12, 0x29, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x4d, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x70, 0x73, 0x65, 0x75, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x72, 0x6d, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x70, 0x73, 0x65, 0x75, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x6d, 0x73, 0x45, 0x72, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x35, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x35, 0x1a, 0x93,
	0x04, 0x0a, 0x08, 0x52, 0x78, 0x6d, 0x4d, 0x65, 0x61, 0x73, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x31, 0x12, 0x1c, 0x0a, 0x0a, 0x67, 0x70, 0x73, 0x5f, 0x74, 0x6f, 0x77, 0x5f, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x70, 0x73, 0x54, 0x6f, 0x77, 0x4d,
	0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x67, 0x6c, 0x6f, 0x5f, 0x74, 0x6f, 0x77, 0x5f, 0x6d, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x6c, 0x6f, 0x54, 0x6f, 0x77, 0x4d, 0x73, 0x12,
	0x1c, 0x0a, 0x0a, 0x62, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x77, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x64, 0x73, 0x54, 0x6f, 0x77, 0x4d, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x32, 0x12, 0x1e, 0x0a, 0x0b, 0x71,
	0x7a, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x77, 0x5f, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x71, 0x7a, 0x73, 0x73, 0x54, 0x6f, 0x77, 0x4d, 0x73, 0x12, 0x27, 0x0a, 0x10, 0x67,
	0x70, 0x73, 0x5f, 0x74, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x6d, 0x73, 0x6c, 0x34, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x67, 0x70, 0x73, 0x54, 0x6f, 0x77, 0x41, 0x63, 0x63,
	0x4d, 0x73, 0x6c, 0x34, 0x12, 0x27, 0x0a, 0x10, 0x67, 0x6c, 0x6f, 0x5f, 0x74, 0x6f, 0x77, 0x5f,
	0x61, 0x63, 0x63, 0x5f, 0x6d, 0x73, 0x6c, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x67, 0x6c, 0x6f, 0x54, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x4d, 0x73, 0x6c, 0x34, 0x12, 0x27, 0x0a,
	0x10, 0x62, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x6d, 0x73, 0x6c,
	0x34, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x64, 0x73, 0x54, 0x6f, 0x77, 0x41,
	0x63, 0x63, 0x4d, 0x73, 0x6c, 0x34, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x33, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x33, 0x12, 0x29, 0x0a, 0x11, 0x71, 0x7a, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x77,
	0x5f, 0x61, 0x63, 0x63, 0x5f, 0x6d, 0x73, 0x6c, 0x34, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x71, 0x7a, 0x73, 0x73, 0x54, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x4d, 0x73, 0x6c, 0x34, 0x12,
	0x15, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x76, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6e, 0x75, 0x6d, 0x53, 0x76, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x34, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x34, 0x12, 0x28, 0x0a, 0x02, 0x73, 0x76,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x47, 0x6e, 0x73, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x52, 0x78, 0x6d, 0x4d, 0x65, 0x61, 0x73, 0x78, 0x53, 0x56, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x02, 0x73, 0x76, 0x1a, 0xc6, 0x01, 0x0a, 0x0c, 0x55, 0x62, 0x78, 0x53, 0x65, 0x63, 0x45,
	0x63, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x30, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x30, 0x12, 0x17, 0x0a,
	0x07, 0x6d, 0x73, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6d, 0x73, 0x67, 0x4e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x63, 0x64, 0x73, 0x61, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x65,
	0x63, 0x64, 0x73, 0x61, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xce, 0x01,
	0x0a, 0x06, 0x4e, 0x61, 0x76, 0x44, 0x6f, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x6f,
	0x77, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x6f, 0x77,
	0x4d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x64, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x67, 0x64, 0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x64, 0x6f, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x64, 0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x64,
	0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x64, 0x6f, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x76, 0x64, 0x6f, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x76, 0x64,
	0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x64, 0x6f, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x68, 0x64, 0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x64, 0x6f, 0x70, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6e, 0x64, 0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x64,
	0x6f, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x65, 0x64, 0x6f, 0x70, 0x22, 0xcf,
	0x02, 0x0a, 0x06, 0x4e, 0x61, 0x76, 0x53, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74,
	0x6f, 0x77, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x6f,
	0x77, 0x4d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x76, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6e, 0x75, 0x6d, 0x53, 0x76, 0x73, 0x12, 0x1d, 0x0a, 0x03, 0x73, 0x76, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x4e, 0x61, 0x76, 0x53, 0x61, 0x74, 0x2e, 0x53, 0x76, 0x73,
	0x52, 0x03, 0x73, 0x76, 0x73, 0x1a, 0xb8, 0x01, 0x0a, 0x03, 0x53, 0x76, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x67, 0x6e, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x67, 0x6e, 0x73, 0x73, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x76, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x76, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63,
	0x6e, 0x6f, 0x5f, 0x64, 0x62, 0x68, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63,
	0x6e, 0x6f, 0x44, 0x62, 0x68, 0x7a, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x76, 0x5f, 0x64,
	0x65, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x76, 0x44, 0x65,
	0x67, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x7a, 0x69, 0x6d, 0x5f, 0x64, 0x65, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x7a, 0x69, 0x6d, 0x44, 0x65, 0x67, 0x12, 0x1c, 0x0a, 0x0a,
	0x70, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x6d, 0x65, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x72, 0x52, 0x65, 0x73, 0x4d, 0x65, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x22, 0x9c, 0x07, 0x0a, 0x06, 0x4e, 0x61, 0x76, 0x50, 0x76, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x74, 0x6f, 0x77, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69,
	0x74, 0x6f, 0x77, 0x4d, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x79, 0x65, 0x61, 0x72, 0x59, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x13, 0x0a,
	0x05, 0x64, 0x61, 0x79, 0x5f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x61,
	0x79, 0x44, 0x12, 0x15, 0x0a, 0x06, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x68, 0x6f, 0x75, 0x72, 0x48, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x69, 0x6e,
	0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x4d,
	0x69, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x65, 0x63, 0x5f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x73, 0x65, 0x63, 0x53, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x08, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x74, 0x41, 0x63, 0x63, 0x4e, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6e, 0x6f, 0x5f,
	0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x61, 0x6e, 0x6f, 0x4e, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x66, 0x69, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x32, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x32, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x5f, 0x73, 0x76, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x75, 0x6d, 0x53, 0x76,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x67, 0x65, 0x37, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x6e, 0x44, 0x65, 0x67, 0x65, 0x37, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x67, 0x65, 0x37, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6c, 0x61, 0x74, 0x44, 0x65, 0x67, 0x65, 0x37, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6d, 0x73, 0x6c, 0x5f,
	0x6d, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x6d, 0x73, 0x6c, 0x4d, 0x6d,
	0x12, 0x18, 0x0a, 0x08, 0x68, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x6d, 0x6d, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x68, 0x41, 0x63, 0x63, 0x4d, 0x6d, 0x12, 0x18, 0x0a, 0x08, 0x76, 0x5f,
	0x61, 0x63, 0x63, 0x5f, 0x6d, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x41,
	0x63, 0x63, 0x4d, 0x6d, 0x12, 0x1b, 0x0a, 0x0a, 0x76, 0x65, 0x6c, 0x5f, 0x6e, 0x5f, 0x6d, 0x6d,
	0x5f, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x6c, 0x4e, 0x4d, 0x6d,
	0x53, 0x12, 0x1b, 0x0a, 0x0a, 0x76, 0x65, 0x6c, 0x5f, 0x65, 0x5f, 0x6d, 0x6d, 0x5f, 0x73, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x6c, 0x45, 0x4d, 0x6d, 0x53, 0x12, 0x1b,
	0x0a, 0x0a, 0x76, 0x65, 0x6c, 0x5f, 0x64, 0x5f, 0x6d, 0x6d, 0x5f, 0x73, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x6c, 0x44, 0x4d, 0x6d, 0x53, 0x12, 0x1f, 0x0a, 0x0c, 0x67,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6d, 0x6d, 0x5f, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x67, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4d, 0x6d, 0x53, 0x12, 0x24, 0x0a, 0x0e,
	0x68, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x6f, 0x74, 0x5f, 0x64, 0x65, 0x67, 0x65, 0x35, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x4d, 0x6f, 0x74, 0x44, 0x65, 0x67,
	0x65, 0x35, 0x12, 0x1b, 0x0a, 0x0a, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x6d, 0x6d, 0x5f, 0x73,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x41, 0x63, 0x63, 0x4d, 0x6d, 0x53, 0x12,
	0x24, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x64, 0x65, 0x67, 0x65,
	0x35, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x41, 0x63, 0x63,
	0x44, 0x65, 0x67, 0x65, 0x35, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x64, 0x6f, 0x70, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x64, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x33, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x33, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x76, 0x65, 0x68, 0x5f, 0x64, 0x65,
	0x67, 0x65, 0x35, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x56,
	0x65, 0x68, 0x44, 0x65, 0x67, 0x65, 0x35, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x67, 0x5f, 0x64,
	0x65, 0x63, 0x5f, 0x64, 0x65, 0x67, 0x65, 0x32, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x6d, 0x61, 0x67, 0x44, 0x65, 0x63, 0x44, 0x65, 0x67, 0x65, 0x32, 0x12, 0x22, 0x0a, 0x0d, 0x6d,
	0x61, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x64, 0x65, 0x67, 0x65, 0x32, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x67, 0x41, 0x63, 0x63, 0x44, 0x65, 0x67, 0x65, 0x32, 0x22,
	0xca, 0x03, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x52, 0x66, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2b, 0x0a,
	0x09, 0x72, 0x66, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x4d, 0x6f, 0x6e, 0x52, 0x66, 0x2e, 0x52, 0x46, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x08, 0x72, 0x66, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x1a, 0xbf, 0x02, 0x0a, 0x07, 0x52,
	0x46, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x6e, 0x74, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x6f, 0x69, 0x73,
	0x65, 0x50, 0x65, 0x72, 0x4d, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x67, 0x63, 0x5f, 0x63, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x67, 0x63, 0x43, 0x6e, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x6a, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6a, 0x61, 0x6d, 0x49, 0x6e, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x6f, 0x66, 0x73, 0x5f,
	0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6f, 0x66, 0x73, 0x49, 0x12, 0x13, 0x0a,
	0x05, 0x6d, 0x61, 0x67, 0x5f, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x61,
	0x67, 0x49, 0x12, 0x13, 0x0a, 0x05, 0x6f, 0x66, 0x73, 0x5f, 0x71, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x6f, 0x66, 0x73, 0x51, 0x12, 0x13, 0x0a, 0x05, 0x6d, 0x61, 0x67, 0x5f, 0x71,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x61, 0x67, 0x51, 0x22, 0xbd, 0x06, 0x0a,
	0x08, 0x52, 0x78, 0x6d, 0x4d, 0x65, 0x61, 0x73, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x0a, 0x67, 0x70, 0x73, 0x5f, 0x74, 0x6f, 0x77, 0x5f,
	0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x70, 0x73, 0x54, 0x6f, 0x77,
	0x4d, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x67, 0x6c, 0x6f, 0x5f, 0x74, 0x6f, 0x77, 0x5f, 0x6d, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x6c, 0x6f, 0x54, 0x6f, 0x77, 0x4d, 0x73,
	0x12, 0x1c, 0x0a, 0x0a, 0x62, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x77, 0x5f, 0x6d, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x64, 0x73, 0x54, 0x6f, 0x77, 0x4d, 0x73, 0x12, 0x1e,
	0x0a, 0x0b, 0x71, 0x7a, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x77, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x71, 0x7a, 0x73, 0x73, 0x54, 0x6f, 0x77, 0x4d, 0x73, 0x12, 0x27,
	0x0a, 0x10, 0x67, 0x70, 0x73, 0x5f, 0x74, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x6d, 0x73,
	0x6c, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x67, 0x70, 0x73, 0x54, 0x6f, 0x77,
	0x41, 0x63, 0x63, 0x4d, 0x73, 0x6c, 0x34, 0x12, 0x27, 0x0a, 0x10, 0x67, 0x6c, 0x6f, 0x5f, 0x74,
	0x6f, 0x77, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x6d, 0x73, 0x6c, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x67, 0x6c, 0x6f, 0x54, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x4d, 0x73, 0x6c, 0x34,
	0x12, 0x27, 0x0a, 0x10, 0x62, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x63, 0x5f,
	0x6d, 0x73, 0x6c, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x64, 0x73, 0x54,
	0x6f, 0x77, 0x41, 0x63, 0x63, 0x4d, 0x73, 0x6c, 0x34, 0x12, 0x29, 0x0a, 0x11, 0x71, 0x7a, 0x73,
	0x73, 0x5f, 0x74, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x6d, 0x73, 0x6c, 0x34, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x71, 0x7a, 0x73, 0x73, 0x54, 0x6f, 0x77, 0x41, 0x63, 0x63,
	0x4d, 0x73, 0x6c, 0x34, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x76, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x75, 0x6d, 0x53, 0x76, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x28, 0x0a, 0x02, 0x73, 0x76, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x52, 0x78, 0x6d, 0x4d, 0x65, 0x61, 0x73, 0x78, 0x2e, 0x52, 0x78, 0x6d, 0x4d, 0x65, 0x61, 0x73,
	0x78, 0x53, 0x56, 0x54, 0x79, 0x70, 0x65, 0x52, 0x02, 0x73, 0x76, 0x1a, 0xfe, 0x02, 0x0a, 0x0e,
	0x52, 0x78, 0x6d, 0x4d, 0x65, 0x61, 0x73, 0x78, 0x53, 0x56, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x67, 0x6e, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x67, 0x6e, 0x73, 0x73, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x76, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x76, 0x49, 0x64, 0x12, 0x11, 0x0a, 0x04,
	0x63, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x4e, 0x6f, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x70, 0x61, 0x74, 0x68, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x12, 0x23, 0x0a, 0x0e, 0x64, 0x6f, 0x70, 0x70, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x73, 0x5f, 0x6d,
	0x5f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x6f, 0x70, 0x70, 0x6c, 0x65,
	0x72, 0x4d, 0x73, 0x4d, 0x53, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x6f, 0x70, 0x70, 0x6c, 0x65, 0x72,
	0x5f, 0x68, 0x7a, 0x5f, 0x68, 0x7a, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x6f,
	0x70, 0x70, 0x6c, 0x65, 0x72, 0x48, 0x7a, 0x48, 0x7a, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x68, 0x6f,
	0x6c, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x77, 0x68, 0x6f, 0x6c, 0x65, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72,
	0x61, 0x63, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x66, 0x72, 0x61, 0x63, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x73, 0x6c, 0x5f, 0x32, 0x31, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x64, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x4d,
	0x73, 0x6c, 0x32, 0x31, 0x12, 0x29, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x73, 0x12,
	0x2b, 0x0a, 0x12, 0x70, 0x73, 0x65, 0x75, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x6d,
	0x73, 0x5f, 0x65, 0x72, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x73, 0x65,
	0x75, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x6d, 0x73, 0x45, 0x72, 0x72, 0x42, 0x0e, 0x5a, 0x0c,
	0x2e, 0x3b, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x64, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sensordata_proto_rawDescOnce sync.Once
	file_sensordata_proto_rawDescData = file_sensordata_proto_rawDesc
)

func file_sensordata_proto_rawDescGZIP() []byte {
	file_sensordata_proto_rawDescOnce.Do(func() {
		file_sensordata_proto_rawDescData = protoimpl.X.CompressGZIP(file_sensordata_proto_rawDescData)
	})
	return file_sensordata_proto_rawDescData
}

var file_sensordata_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_sensordata_proto_goTypes = []interface{}{
	(*ImuData)(nil),                   // 0: ImuData
	(*MagnetometerData)(nil),          // 1: MagnetometerData
	(*GnssData)(nil),                  // 2: GnssData
	(*NavDop)(nil),                    // 3: NavDop
	(*NavSat)(nil),                    // 4: NavSat
	(*NavPvt)(nil),                    // 5: NavPvt
	(*MonRf)(nil),                     // 6: MonRf
	(*RxmMeasx)(nil),                  // 7: RxmMeasx
	(*ImuData_AccelerometerData)(nil), // 8: ImuData.AccelerometerData
	(*ImuData_GyroscopeData)(nil),     // 9: ImuData.GyroscopeData
	(*GnssData_Dop)(nil),              // 10: GnssData.Dop
	(*GnssData_Satellites)(nil),       // 11: GnssData.Satellites
	(*GnssData_RF)(nil),               // 12: GnssData.RF
	(*GnssData_RxmMeasxSVType)(nil),   // 13: GnssData.RxmMeasxSVType
	(*GnssData_RxmMeasx)(nil),         // 14: GnssData.RxmMeasx
	(*GnssData_UbxSecEcsign)(nil),     // 15: GnssData.UbxSecEcsign
	(*NavSat_Svs)(nil),                // 16: NavSat.Svs
	(*MonRf_RFBlock)(nil),             // 17: MonRf.RFBlock
	(*RxmMeasx_RxmMeasxSVType)(nil),   // 18: RxmMeasx.RxmMeasxSVType
}
var file_sensordata_proto_depIdxs = []int32{
	8,  // 0: ImuData.accelerometer:type_name -> ImuData.AccelerometerData
	9,  // 1: ImuData.gyroscope:type_name -> ImuData.GyroscopeData
	10, // 2: GnssData.dop:type_name -> GnssData.Dop
	11, // 3: GnssData.satellites:type_name -> GnssData.Satellites
	12, // 4: GnssData.rf:type_name -> GnssData.RF
	14, // 5: GnssData.rxm_measx:type_name -> GnssData.RxmMeasx
	15, // 6: GnssData.sec_ecsign:type_name -> GnssData.UbxSecEcsign
	16, // 7: NavSat.svs:type_name -> NavSat.Svs
	17, // 8: MonRf.rf_blocks:type_name -> MonRf.RFBlock
	18, // 9: RxmMeasx.sv:type_name -> RxmMeasx.RxmMeasxSVType
	13, // 10: GnssData.RxmMeasx.sv:type_name -> GnssData.RxmMeasxSVType
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_sensordata_proto_init() }
func file_sensordata_proto_init() {
	if File_sensordata_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sensordata_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImuData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sensordata_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MagnetometerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sensordata_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GnssData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sensordata_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavDop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sensordata_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavSat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sensordata_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavPvt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sensordata_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonRf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sensordata_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RxmMeasx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sensordata_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImuData_AccelerometerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sensordata_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImuData_GyroscopeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sensordata_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GnssData_Dop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sensordata_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GnssData_Satellites); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sensordata_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GnssData_RF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sensordata_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GnssData_RxmMeasxSVType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sensordata_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GnssData_RxmMeasx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sensordata_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GnssData_UbxSecEcsign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sensordata_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavSat_Svs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sensordata_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonRf_RFBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sensordata_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RxmMeasx_RxmMeasxSVType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sensordata_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sensordata_proto_goTypes,
		DependencyIndexes: file_sensordata_proto_depIdxs,
		MessageInfos:      file_sensordata_proto_msgTypes,
	}.Build()
	File_sensordata_proto = out.File
	file_sensordata_proto_rawDesc = nil
	file_sensordata_proto_goTypes = nil
	file_sensordata_proto_depIdxs = nil
}

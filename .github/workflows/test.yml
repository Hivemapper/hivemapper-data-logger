# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Test

on:
  push:

jobs:
  build:
    strategy: 
      matrix:
        # buildroot uses 1.19, so we want to sanity check that too
        version: ['1.19', '1.20']
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.version }}

    - name: Build
      run: GOOS=linux GOARCH=arm64 go build ./cmd/datalogger

  test-protoc:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Install protoc
      uses: arduino/setup-protoc@v3

    - name: Install Protoc-Gen-Go
      run: |
        go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2

    - name: Generate Go code
      run: |
        mkdir -p proto-out-new
        protoc --go_out=./proto-out-new --go-grpc_out=require_unimplemented_servers=false:./proto-out-new --proto_path=./proto/hm -I=./proto/hm ./proto/hm/sensordata.proto

    # ignore the first 5 lines, the versions will be different, but that's fine
    - name: Compare to committed files
      run: |
        diff <(sed '1,5d' proto-out/sensordata.pb.go) <(sed '1,5d' proto-out-new/sensordata.pb.go)

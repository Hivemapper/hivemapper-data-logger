// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/sf/events/v1/events.proto

package eventsv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/streamingfast/hivemapper-data-logger/gen/proto/sf/events/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// EventServiceName is the fully-qualified name of the EventService service.
	EventServiceName = "sf.events.v1.EventService"
)

// EventServiceClient is a client for the sf.events.v1.EventService service.
type EventServiceClient interface {
	Events(context.Context, *connect_go.Request[v1.EventsRequest]) (*connect_go.ServerStreamForClient[v1.EventsResponse], error)
}

// NewEventServiceClient constructs a client for the sf.events.v1.EventService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEventServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) EventServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &eventServiceClient{
		events: connect_go.NewClient[v1.EventsRequest, v1.EventsResponse](
			httpClient,
			baseURL+"/sf.events.v1.EventService/Events",
			opts...,
		),
	}
}

// eventServiceClient implements EventServiceClient.
type eventServiceClient struct {
	events *connect_go.Client[v1.EventsRequest, v1.EventsResponse]
}

// Events calls sf.events.v1.EventService.Events.
func (c *eventServiceClient) Events(ctx context.Context, req *connect_go.Request[v1.EventsRequest]) (*connect_go.ServerStreamForClient[v1.EventsResponse], error) {
	return c.events.CallServerStream(ctx, req)
}

// EventServiceHandler is an implementation of the sf.events.v1.EventService service.
type EventServiceHandler interface {
	Events(context.Context, *connect_go.Request[v1.EventsRequest], *connect_go.ServerStream[v1.EventsResponse]) error
}

// NewEventServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEventServiceHandler(svc EventServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/sf.events.v1.EventService/Events", connect_go.NewServerStreamHandler(
		"/sf.events.v1.EventService/Events",
		svc.Events,
		opts...,
	))
	return "/sf.events.v1.EventService/", mux
}

// UnimplementedEventServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEventServiceHandler struct{}

func (UnimplementedEventServiceHandler) Events(context.Context, *connect_go.Request[v1.EventsRequest], *connect_go.ServerStream[v1.EventsResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sf.events.v1.EventService.Events is not implemented"))
}
